name: Build OpenWrt snapshot

on: [push]
#on:
#  schedule:
#    - cron: "0 4 * * *"

jobs:
  determine_targets:
    name: Find available targets
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.find_targets.outputs.targets }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Find targets
      id: find_targets
      run: |
        TARGETS="$(perl ./scripts/dump-target-info.pl targets 2>/dev/null | awk '{ print $1 }')"
        JSON='{"targets":['
        FIRST=1
        for TARGET in $TARGETS; do
          [[ $FIRST -ne 1 ]] && JSON="$JSON"','
          JSON="$JSON"'"'"${TARGET}"'"'
          FIRST=0
        done
        JSON="$JSON"']}'

        echo -e "\n---- targets ----\n"
        echo "$JSON"
        echo -e "\n---- targets ----\n"

        echo "::set-output name=targets::$JSON"

  build:
    name: Build ${{ matrix.config }}/${{ matrix.targets }}
    needs: determine_targets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        targets:
          - "x86/64"
          - "ath79/generic"
        config:
          - "selinux"
          - "nls"
          - "gcc10"

      #matrix: ${{fromJson(needs.determine_targets.outputs.targets)}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        #repository: "openwrt/openwrt"

    - name: Cache sources
      uses: davidsbond/cache@master
      with:
        path: dl/
        key: Sources
        update: True

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -y install libncurses-dev
        TARGET=$(echo ${{ matrix.targets }} | cut -d "/" -f 1)
        SUBTARGET=$(echo ${{ matrix.targets }} | cut -d "/" -f 2)
        echo "::set-env name=TARGET::$TARGET"
        echo "::set-env name=SUBTARGET::$SUBTARGET"

    - name: Update & Install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Set configuration
      run: |
        curl "https://downloads.openwrt.org/snapshots/targets/${{ matrix.targets }}/config.buildinfo" > .config
        cat ".ci/${{ matrix.config }}.config" >> .config

        echo -e "\n---- config input ----\n"
        cat .config
        echo -e "\n---- config input ----\n"

        make defconfig

        echo -e "\n---- config post-defconfig ----\n"
        cat .config
        echo -e "\n---- config post-defconfig ----\n"

    - name: Download package
      run: |
        make download -j$(nproc)

    - name: Build tools
      run: |
        make tools/install -j$(nproc) || \
          make tools/install V=s

    - name: Build toolchain
      run: |
        make toolchain/install -j$(nproc) || \
          make toolchain/install V=s

    - name: Build target
      run: |
        make target/compile -j$(nproc) IGNORE_ERRORS='n m' || \
          make target/compile IGNORE_ERRORS='n m' V=s

    - name: Build packages
      run: |
        make package/compile -j$(nproc) IGNORE_ERRORS='n m' || \
          make package/compile IGNORE_ERRORS='n m' V=s

        make package/install -j$(nproc) || \
          make package/install V=s

        make package/index CONFIG_SIGNED_PACKAGES= V=s

    - name: Add kmods feed
      run: |
        TOPDIR=$(pwd)
        export TOPDIR
        STAGE_ROOT="$(make --no-print-directory val.STAGING_DIR_ROOT)"
        KERNEL_VERSION="$(make --no-print-directory -C target/linux \
            val.LINUX_VERSION val.LINUX_RELEASE val.LINUX_VERMAGIC | \
            tr '\n' '-' | head -c -1)"

        mkdir -p files/etc/opkg/
        sed -e 's#^\(src/gz .*\)_core \(.*\)/packages$#&\n\1_kmods \2/kmods/'"${KERNEL_VERSION}#" \
          "${STAGE_ROOT}/etc/opkg/distfeeds.conf" > files/etc/opkg/distfeeds.conf

        echo -e "\n---- distfeeds.conf ----\n"
        cat files/etc/opkg/distfeeds.conf
        echo -e "\n---- distfeeds.conf ----\n"

        echo ::set-env name=kernel_version::$KERNEL_VERSION

    - name: Build firmware
      run: |
        make target/install EXTRA_IMAGE_NAME=${{ matrix.config }} -j$(nproc) || \
          make target/install V=s

    - name: Buildinfo
      run: |
        make buildinfo V=s

    - name: JSON overview
      run: |
        make json_overview_image_info V=s

    - name: Checksum
      run: |
        make checksum V=s

    - name: Sanitize target
      run: echo ::set-env name=target_sani::$(echo ${{ matrix.targets }} | tr "/" "-")

    - name: Prepare Docker ImageBuilder and SDK
      run: |
        mkdir -p build/sdk/ build/ib/
        cp .ci/Dockerfile build/ib/
        cp .ci/Dockerfile build/sdk/
        tar xf bin/targets/${{ matrix.targets }}/openwrt-imagebuilder* --strip=1 -C ./build/ib
        tar xf bin/targets/${{ matrix.targets }}/openwrt-sdk* --strip=1 -C  build/sdk

    - name: Push ImageBuilder to Docker Hub
      continue-on-error: true
      uses: docker/build-push-action@v1
      with:
        path: build/ib/
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: aparcar/openwrt-imagebuilder-${{ matrix.config }}
        tags: ${{ env.target_sani }}

    - name: Push SDK to Docker Hub
      continue-on-error: true
      uses: docker/build-push-action@v1
      with:
        path: build/sdk
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: aparcar/openwrt-sdk-${{ matrix.config }}
        tags: ${{ env.target_sani }}

    - name: Upload images
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.target_sani }}-${{ matrix.config }}-images
        path: bin/targets/${{ matrix.targets }}/openwrt-${{ env.TARGET }}-*

    - name: Upload packages
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.target_sani }}-${{ matrix.config }}-packages
        path: |
          bin/targets/${{ matrix.targets }}/packages/*.ipk
          !bin/targets/${{ matrix.targets }}/packages/kmod-*.ipk

    - name: Upload kmods
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.target_sani }}-${{ matrix.config }}-kmods
        path: bin/targets/${{ matrix.targets }}/packages/kmod-*.ipk

    - name: Upload supplementary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.target_sani }}-${{ matrix.config }}-supplementary
        path: |
          bin/targets/${{ matrix.targets }}/*.buildinfo
          bin/targets/${{ matrix.targets }}/*.json
          bin/targets/${{ matrix.targets }}/*.manifest
          bin/targets/${{ matrix.targets }}/kernel-debug.tar.zst
          bin/targets/${{ matrix.targets }}/openwrt-imagebuilder*
          bin/targets/${{ matrix.targets }}/openwrt-sdk*
          bin/targets/${{ matrix.targets }}/sha256sums*

    - name: Upload logs
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.target_sani }}-${{ matrix.config }}-logs
        path: logs/

    - name: Upload folder to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete --exclude 'kmods/*'
      env:
        AWS_S3_BUCKET: openwrt-ci
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://s3.aparcar.org
        SOURCE_DIR: bin/targets/${{ matrix.targets }}
        DEST_DIR: ${{ matrix.config }}/${{ matrix.targets }}

    - name: Prepare upload of kmods
      run: |
        mkdir -p bin/targets/${{ matrix.targets }}/kmods/${{ env.kernel_version }}/
        cp bin/targets/${{ matrix.targets }}/packages/kmod-*.ipk \
            bin/targets/${{ matrix.targets }}/kmods/${{ env.kernel_version }}/

    - name: Upload kmods to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: openwrt-ci
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://s3.aparcar.org
        SOURCE_DIR: bin/targets/${{ matrix.targets }}/kmods/${{ env.kernel_version }}/
        DEST_DIR: ${{ matrix.config }}/${{ matrix.targets }}/kmods/${{ env.kernel_version }}/
