commit 14770460a84e5741fbcba0fdc9c97bab84c8d5cf
Author: Paul Spooren <mail@aparcar.org>
Date:   Sat Mar 16 00:38:39 2024 +0100

    Revert "adb: add zstd compression support"
    
    This reverts commit c15eb020ffcbdac6a0c658100ec2e41da2d6e15f.

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index fba1735..45498a3 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -12,7 +12,7 @@ test-legacy:alpine:
     stage: test
     script:
         - apk update
-        - apk add make gcc git musl-dev openssl-dev linux-headers zlib-dev lua5.3-dev lua5.3-lzlib zstd-dev
+        - apk add make gcc git musl-dev openssl-dev linux-headers zlib-dev lua5.3-dev lua5.3-lzlib
         - make -j$(nproc) check
     tags:
         - docker-alpine
@@ -23,7 +23,7 @@ test:alpine:
     stage: test
     script:
         - apk update
-        - apk add make gcc git musl-dev openssl-dev linux-headers zlib-dev zstd-dev lua5.3-dev lua5.3-lzlib meson zlib-static zstd-static openssl-libs-static
+        - apk add make gcc git musl-dev openssl-dev linux-headers zlib-dev lua5.3-dev lua5.3-lzlib meson zlib-static openssl-libs-static
         - meson build
         - ninja -C build
     tags:
@@ -35,7 +35,7 @@ test:debian:
     stage: test
     script:
         - apt-get update
-        - apt-get install -y make gcc git libssl-dev zlib1g-dev libzstd-dev lua5.3-dev lua5.2 lua-zlib-dev sudo meson
+        - apt-get install -y make gcc git libssl-dev zlib1g-dev lua5.3-dev lua5.2 lua-zlib-dev sudo meson
         - unlink /bin/sh
         - ln -s /bin/bash /bin/sh
         - meson build
@@ -48,7 +48,7 @@ build-static:
     stage: build
     image: alpinelinux/build-base:latest-$ARCH
     script:
-        - abuild-apk add make gcc git musl-dev openssl-dev linux-headers zlib-dev zstd-dev lua5.3-dev lua5.3-lzlib zlib-static zstd-static openssl-libs-static
+        - abuild-apk add make gcc git musl-dev openssl-dev linux-headers zlib-dev lua5.3-dev lua5.3-lzlib zlib-static openssl-libs-static
         - make -j$(nproc) static
         - install -s -m0755 src/apk.static src/apk.static-$ARCH
     parallel:
diff --git a/meson.build b/meson.build
index 3a4ba7c..1b884c1 100644
--- a/meson.build
+++ b/meson.build
@@ -16,14 +16,12 @@ scdoc_dep = dependency('scdoc', version: '>=1.10', required: get_option('docs'))
 
 shared_deps = [
 	dependency('zlib'),
-	dependency('libzstd'),
 	dependency('openssl'),
 ]
 
 static_deps = [
 	dependency('openssl', static: true),
 	dependency('zlib', static: true),
-	dependency('libzstd', static: true),
 ]
 
 add_project_arguments('-D_GNU_SOURCE', language: 'c')
diff --git a/src/Makefile b/src/Makefile
index 9e329b5..19b2d53 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -15,17 +15,14 @@ OPENSSL_LIBS		:= $(shell $(PKG_CONFIG) --libs openssl)
 ZLIB_CFLAGS		:= $(shell $(PKG_CONFIG) --cflags zlib)
 ZLIB_LIBS		:= $(shell $(PKG_CONFIG) --libs zlib)
 
-ZSTD_CFLAGS		:= $(shell $(PKG_CONFIG) --cflags libzstd)
-ZSTD_LIBS		:= $(shell $(PKG_CONFIG) --libs libzstd)
-
 # Dynamic library
 libapk_soname		:= 2.99.0
 libapk_so		:= $(obj)/libapk.so.$(libapk_soname)
 libapk.so.$(libapk_soname)-objs := \
 	adb.o adb_comp.o adb_walk_adb.o adb_walk_genadb.o adb_walk_gentext.o adb_walk_text.o apk_adb.o \
-	atom.o blob.o commit.o common.o context.o crypto_openssl.o ctype.o database.o hash.o \
-	extract_v2.o extract_v3.o fs_fsys.o fs_uvol.o io.o io_gunzip.o io_zstd.o io_url.o \
-	tar.o package.o pathbuilder.o print.o solver.o trust.o version.o
+	atom.o blob.o commit.o common.o context.o crypto_openssl.o database.o hash.o \
+	extract_v2.o extract_v3.o fs_fsys.o fs_uvol.o io.o io_gunzip.o io_url.o tar.o \
+	package.o pathbuilder.o print.o solver.o trust.o version.o
 
 libapk.so.$(libapk_soname)-libs := libfetch/libfetch.a
 
@@ -93,9 +90,9 @@ LIBS_apk.static		:= -Wl,--as-needed -ldl -Wl,--no-as-needed
 LDFLAGS_apk		+= -L$(obj)
 LDFLAGS_apk-test	+= -L$(obj)
 
-CFLAGS_ALL		+= $(OPENSSL_CFLAGS) $(ZLIB_CFLAGS) $(ZSTD_CFLAGS)
+CFLAGS_ALL		+= $(OPENSSL_CFLAGS) $(ZLIB_CFLAGS)
 LIBS			:= -Wl,--as-needed \
-				$(OPENSSL_LIBS) $(ZLIB_LIBS) $(ZSTD_LIBS) \
+				$(OPENSSL_LIBS) $(ZLIB_LIBS) \
 			   -Wl,--no-as-needed
 
 # Help generation
diff --git a/src/adb.h b/src/adb.h
index 949b50c..abc4af9 100644
--- a/src/adb.h
+++ b/src/adb.h
@@ -340,7 +340,6 @@ struct adb_compression_spec {
 // none/1 is "no compression"
 #define ADB_COMP_NONE		0x00
 #define ADB_COMP_DEFLATE	0x01
-#define ADB_COMP_ZSTD		0x02
 
 int adb_parse_compression(const char *spec_string, struct adb_compression_spec *spec);
 struct apk_istream *adb_decompress(struct apk_istream *is, struct adb_compression_spec *spec);
diff --git a/src/adb_comp.c b/src/adb_comp.c
index 2970777..c8e6fe5 100644
--- a/src/adb_comp.c
+++ b/src/adb_comp.c
@@ -26,12 +26,6 @@ static const struct compression_info compression_infos[] = {
 		.decompress = apk_istream_deflate,
 		.min_level = 0, .max_level = 9,
 	},
-	[ADB_COMP_ZSTD] = {
-		.name = "zstd",
-		.compress = apk_ostream_zstd,
-		.decompress = apk_istream_zstd,
-		.min_level = 0, .max_level = 22,
-	},
 };
 
 static const struct compression_info *compression_info_by_name(const char *name, size_t n, uint8_t *compalg)
diff --git a/src/apk_io.h b/src/apk_io.h
index 3ef53a8..f95dc3e 100644
--- a/src/apk_io.h
+++ b/src/apk_io.h
@@ -235,7 +235,4 @@ static inline struct apk_ostream *apk_ostream_deflate(struct apk_ostream *os, ui
 	return apk_ostream_zlib(os, 1, level);
 }
 
-struct apk_istream *apk_istream_zstd(struct apk_istream *);
-struct apk_ostream *apk_ostream_zstd(struct apk_ostream *, uint8_t);
-
 #endif
diff --git a/src/apk_nproc.h b/src/apk_nproc.h
deleted file mode 100644
index 6328a25..0000000
--- a/src/apk_nproc.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#pragma once
-#include <unistd.h>
-#ifdef __linux__
-#include <sched.h>
-#endif
-
-static inline int apk_get_nproc(void)
-{
-#ifdef __linux__
-	cpu_set_t cset;
-	sched_getaffinity(0, sizeof(cset), &cset);
-	return CPU_COUNT(&cset);
-#else
-	return (int)sysconf(_SC_NPROCESSORS_ONLN);
-#endif
-}
diff --git a/src/io_zstd.c b/src/io_zstd.c
deleted file mode 100644
index 5215b62..0000000
--- a/src/io_zstd.c
+++ /dev/null
@@ -1,245 +0,0 @@
-/* io_zstd.c - Alpine Package Keeper (APK)
- *
- * Copyright (C) 2008-2023 Timo Ter√§s <timo.teras@iki.fi>
- * Copyright (C) 2023 q66 <q66@chimera-linux.org>
- * All rights reserved.
- *
- * SPDX-License-Identifier: GPL-2.0-only
- */
-
-#include <errno.h>
-#include <stdio.h>
-#include <fcntl.h>
-#include <unistd.h>
-#include <zstd.h>
-
-#include "apk_defines.h"
-#include "apk_io.h"
-#include "apk_nproc.h"
-
-struct apk_zstd_istream {
-	struct apk_istream is;
-	struct apk_istream *input;
-	ZSTD_DCtx *ctx;
-	void *buf_in;
-	size_t buf_insize;
-	ZSTD_inBuffer inp;
-};
-
-static void zi_get_meta(struct apk_istream *input, struct apk_file_meta *meta)
-{
-	struct apk_zstd_istream *is = container_of(input, struct apk_zstd_istream, is);
-	apk_istream_get_meta(is->input, meta);
-}
-
-static ssize_t zi_read(struct apk_istream *input, void *ptr, size_t size)
-{
-	struct apk_zstd_istream *is = container_of(input, struct apk_zstd_istream, is);
-	uint8_t *cptr = ptr;
-
-	while (size) {
-		/* read next chunk */
-		if (is->inp.pos == 0 || is->inp.pos >= is->inp.size) {
-			ssize_t rs = apk_istream_read_max(is->input, is->buf_in, is->buf_insize);
-			if (rs < 0) {
-				is->is.err = rs;
-				goto ret;
-			} else if (rs == 0) {
-				/* eof */
-				is->is.err = 1;
-				goto ret;
-			}
-			is->inp.size = rs;
-			is->inp.pos = 0;
-		}
-		while (is->inp.pos < is->inp.size) {
-			ZSTD_outBuffer outp = {cptr, size, 0};
-			size_t ret = ZSTD_decompressStream(is->ctx, &outp, &is->inp);
-			if (ZSTD_isError(ret)) {
-				is->is.err = -EIO;
-				goto ret;
-			}
-			cptr += outp.pos;
-			size -= outp.pos;
-			/* no more space in the buffer; leave the rest for next time */
-			if (!size) goto ret;
-		}
-	}
-
-ret:
-	return cptr - (uint8_t *)ptr;
-}
-
-static int zi_close(struct apk_istream *input)
-{
-	int r;
-	struct apk_zstd_istream *is = container_of(input, struct apk_zstd_istream, is);
-
-	ZSTD_freeDCtx(is->ctx);
-	r = apk_istream_close_error(is->input, is->is.err);
-	free(is);
-	return r;
-}
-
-static const struct apk_istream_ops zstd_istream_ops = {
-	.get_meta = zi_get_meta,
-	.read = zi_read,
-	.close = zi_close,
-};
-
-struct apk_istream *apk_istream_zstd(struct apk_istream *input)
-{
-	struct apk_zstd_istream *is;
-	size_t buf_insize;
-
-	if (IS_ERR(input)) return ERR_CAST(input);
-
-	buf_insize = ZSTD_DStreamInSize();
-
-	is = malloc(sizeof(struct apk_zstd_istream) + apk_io_bufsize + buf_insize);
-	if (is == NULL) goto err;
-
-	is->buf_in = (uint8_t*)(is + 1) + apk_io_bufsize;
-	is->buf_insize = buf_insize;
-	is->inp.size = is->inp.pos = 0;
-	is->inp.src = is->buf_in;
-
-	if ((is->ctx = ZSTD_createDCtx()) == NULL) {
-		free(is);
-		goto err;
-	}
-
-	memset(&is->is, 0, sizeof(is->is));
-
-	is->is.ops = &zstd_istream_ops;
-	is->is.buf = (uint8_t*)(is + 1);
-	is->is.buf_size = apk_io_bufsize;
-	is->input = input;
-
-	return &is->is;
-err:
-	return ERR_PTR(apk_istream_close_error(input, -ENOMEM));
-}
-
-struct apk_zstd_ostream {
-	struct apk_ostream os;
-	struct apk_ostream *output;
-	ZSTD_CCtx *ctx;
-	void *buf_out;
-	size_t buf_outsize;
-};
-
-static int zo_write(struct apk_ostream *output, const void *ptr, size_t size)
-{
-	struct apk_zstd_ostream *os = container_of(output, struct apk_zstd_ostream, os);
-	ssize_t r;
-	ZSTD_inBuffer inp = {ptr, size, 0};
-
-	do {
-		ZSTD_outBuffer outp = {os->buf_out, os->buf_outsize, 0};
-		size_t rem = ZSTD_compressStream2(os->ctx, &outp, &inp, ZSTD_e_continue);
-
-		if (ZSTD_isError(rem))
-			return apk_ostream_cancel(os->output, -EIO);
-
-		if (outp.pos != 0) {
-			r = apk_ostream_write(os->output, os->buf_out, outp.pos);
-			if (r < 0) return r;
-		}
-	} while (inp.pos != inp.size);
-
-	return 0;
-}
-
-static int zo_close(struct apk_ostream *output)
-{
-	struct apk_zstd_ostream *os = container_of(output, struct apk_zstd_ostream, os);
-	ZSTD_inBuffer inp = {NULL, 0, 0};
-	size_t rem;
-	int r, rc = output->rc;
-
-	do {
-		ZSTD_outBuffer outp = {os->buf_out, os->buf_outsize, 0};
-		rem = ZSTD_compressStream2(os->ctx, &outp, &inp, ZSTD_e_end);
-
-		if (ZSTD_isError(rem)) break;
-
-		if (outp.pos && apk_ostream_write(os->output, os->buf_out, outp.pos) < 0)
-			break;
-	} while (rem != 0);
-
-	r = apk_ostream_close(os->output);
-	ZSTD_freeCCtx(os->ctx);
-	free(os);
-
-	if (rc) return rc;
-	if (ZSTD_isError(rem)) return 1;
-
-	return r;
-}
-
-static const struct apk_ostream_ops zstd_ostream_ops = {
-	.write = zo_write,
-	.close = zo_close,
-};
-
-struct apk_ostream *apk_ostream_zstd(struct apk_ostream *output, uint8_t level)
-{
-	struct apk_zstd_ostream *os;
-	size_t errc, buf_outsize;
-	int threads;
-	ZSTD_bounds bounds;
-
-	if (IS_ERR(output)) return ERR_CAST(output);
-
-	buf_outsize = ZSTD_CStreamOutSize();
-
-	os = malloc(sizeof(struct apk_zstd_ostream) + buf_outsize);
-	if (os == NULL) goto err;
-
-	os->buf_outsize = buf_outsize;
-	os->buf_out = (uint8_t*)(os + 1);
-
-	if ((os->ctx = ZSTD_createCCtx()) == NULL) {
-		free(os);
-		goto err;
-	}
-
-	threads = apk_get_nproc();
-
-	/* above 6 threads, zstd does not actually seem to perform much or at all
-	 * better; it uses the cpu, it uses a disproportionate amount of memory,
-	 * but time improvements are marginal at best
-	 */
-	if (threads > 6) threads = 6;
-
-	/* constrain the thread count; e.g. static zstd does not support threads
-	 * and will return 0 for both bounds, and setting compression level to
-	 * any other number would actually fail, so avoid doing that
-	 */
-	bounds = ZSTD_cParam_getBounds(ZSTD_c_nbWorkers);
-	if (threads < bounds.lowerBound) threads = bounds.lowerBound;
-	if (threads > bounds.upperBound) threads = bounds.upperBound;
-
-	errc = ZSTD_CCtx_setParameter(os->ctx, ZSTD_c_compressionLevel, level);
-	if (ZSTD_isError(errc)) {
-		free(os);
-		goto err;
-	}
-
-	errc = ZSTD_CCtx_setParameter(os->ctx, ZSTD_c_nbWorkers, threads);
-	if (ZSTD_isError(errc)) {
-		free(os);
-		goto err;
-	}
-
-	memset(&os->os, 0, sizeof(os->os));
-
-	os->os.ops = &zstd_ostream_ops;
-	os->output = output;
-
-	return &os->os;
-err:
-	apk_ostream_close(output);
-	return ERR_PTR(-ENOMEM);
-}
diff --git a/src/meson.build b/src/meson.build
index d3bee1f..7c9642c 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -23,7 +23,6 @@ libapk_src = [
 	'io.c',
 	'io_url.c',
 	'io_gunzip.c',
-	'io_zstd.c',
 	'package.c',
 	'pathbuilder.c',
 	'print.c',
